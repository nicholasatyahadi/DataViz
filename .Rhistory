#dynamic content
output$bodycontent <- renderUI({
submitems <- lapply(menuitems(), function(x){
tabItem(tabName = paste0("menu_", x), uiOutput(paste0("menu_", x)))
})
items <- c(
list(
tabItem(tabName = "mainpage",
h3("Welcome to DataViz Beta")
)
),
submitems,
list(
tabItem(tabName = "uppage",
h3("Upload your CSV file here"),
sidebarLayout(
sidebarPanel(width = 3,
fileInput('file', 'Upload CSV File:',
accept=c('text/csv',
'text/comma-separated-values,text/plain',
'.csv')),
tags$br(),
radioButtons('sep', 'Delimiter',
c(Semicolon=';',
Comma=',',
Tab='\t'),
','),
radioButtons('quote', 'Quote',
c(None='',
'Double Quote'='"',
'Single Quote'="'"),
'"'),
radioButtons('decimal', 'Decimal',
c(Comma = ',',
Dot = '.'),
'.'),
radioButtons("disp", "Display",
choices = c(Head = "head",
All = "all"),
selected = "head")
),
mainPanel(
tableOutput('contents'),
htmlOutput('narows')
)
)
)
),
list(
tabItem(tabName = "options",
textInput("addmenu", "Add New Graph (Don't use spacing between characters)"),
actionButton("add", "Add"),
selectInput("delmenu", "Delete Graph", choices = menuitems()),
actionButton("del", "Delete")
)
)
)
do.call(tabItems, items)
})
#dynamic content in the dynamic menuitems
prop <- list()
observe({
prop[[enden(menuitems())]] <- rep("",4)
lapply(menuitems(), function(x){
output[[paste0("menu_", x)]] <- renderUI ({
list(fluidRow(
box(width = 4,
pickerInput(paste0("xaxis_",x),"X-Axis",choices = c("",colnames(csvfile())), selected = max(prop[[x]][1],""), multiple = F),
pickerInput(paste0("yaxis_",x),"Y-Axis",choices = c("",colnames(csvfile())), selected = max(prop[[x]][2],""), multiple = F),
pickerInput(paste0('calcmethod_',x),"Optional Calculation on Y-Axis", choices = c("",
Sum = 'sum',
Average = 'mean',
Median = 'median',
Count = 'length',
CountD = 'lendist'),
selected = max(prop[[x]][4],""), multiple = F),
pickerInput(paste0("plotmod_",x), "Plot Model", choices = c("",
"Barplot",
"LineChart",
"ScatterPlot",
"PieChart"),
selected = max(prop[[x]][3],""), multiple = F)
# ,
# switchInput(inputId = paste0('togplot_',x), value = F)
),
box(width = 8,
#htmlOutput(paste0('testax_',x))
plotlyOutput(paste0('plot_',x)),
verbatimTextOutput(paste0('textev_',x)),
verbatimTextOutput(paste0('stextev_',x))
)
)
)
})
# output[[paste0('testax_',x)]] <- renderText({
#   paste0('X-Axis: ',input[[paste0('xaxis_',x)]],' Y-Axis: ',input[[paste0('yaxis_',x)]])
# })
prop[[x]] <- c(input[[paste0('xaxis_',x)]],
input[[paste0('yaxis_',x)]],
input[[paste0('plotmod_',x)]],
input[[paste0('calcmethod_',x)]])
#To Plot
df <- fcsvfile()
output[[paste0('plot_',x)]] <- renderPlotly({
if(length(prop[[x]])==4){
df1 <- df[c(prop[[x]][1],prop[[x]][2])]
titletext<-paste0("<b>",prop[[x]][3],"</b> ",colnames(df1)[1]," VS. ",colnames(df1)[2])
if(prop[[x]][3]=="Barplot"){
fun <- prop[[x]][4]
df1 <- df1 %>% group_by_at(vars(colnames(df1)[1])) %>% summarize_at(vars(colnames(df1)[2]),.funs=fun)
df1 <- as.data.frame(df1)
plot <- ggplot(df1, aes(x = df1[,1], y = df1[,2], fill = factor(df1[,1]))) +
geom_bar(stat="identity") +
labs(title = titletext, x = colnames(df1)[1], y = colnames(df1)[2])
ggplotly(plot+theme(legend.title = element_blank()),source = paste0('ev_',x))
clcevd <- event_data('plotly_click', source = paste0('ev_',x))$curveNumber
slcevd <- event_data('plotly_selected', source = paste0('ev_',x))$curveNumber
}else if(prop[[x]][3]=="LineChart"){
plot <- ggplot(df1, aes(x=df1[,1], y=df1[,2])) +
geom_line(color = "#2557a8", size = 1) +
labs(title = titletext, x = colnames(df1)[1], y = colnames(df1)[2])
ggplotly(plot+theme(legend.title = element_blank()),source = paste0('ev_',x))
clcevd <- event_data('plotly_click', source = paste0('ev_',x))$pointNumber
slcevd <- event_data('plotly_selected', source = paste0('ev_',x))$pointNumber
}else if(prop[[x]][3]=="ScatterPlot"){
plot <- ggplot(df1, aes(x=df1[,1], y=df1[,2])) +
geom_point(color = "#04c246") +
labs(title = titletext, x = colnames(df1)[1], y = colnames(df1)[2])
ggplotly(plot+theme(legend.title = element_blank()), source = paste0('ev_',x))
clcevd <- event_data('plotly_click', source = paste0('ev_',x))$pointNumber
slcevd <- event_data('plotly_selected', source = paste0('ev_',x))$pointNumber
}else if(prop[[x]][3]=="PieChart"){
fun <- prop[[x]][4]
df1 <- df1 %>% group_by_at(vars(colnames(df1)[1])) %>% summarize_at(vars(colnames(df1)[2]),.funs=fun)
df1 <- as.data.frame(df1)
plot_ly(df1, labels = df1[,1], values = df1[,2], type = 'pie', source = paste0('ev_',x))
clcevd <- event_data('plotly_click', source = paste0('ev_',x))$pointNumber
slcevd <- NULL
}
if(!is.null(c(clcevd,slcevd))){
selrow <- unique(c(clcevd,slcevd)) + 1
global$filters <- c(input[[paste0('xaxis_',x)]],df1[selrow,1])
}else{global$filters<-input[[paste0('xaxis_',x)]]}
}
})
output[[paste0('textev_',x)]] <- renderPrint({
ed <- event_data('plotly_click', source = paste0('ev_',x))
ed
})
output[[paste0('stextev_',x)]] <- renderPrint({
ed <- event_data('plotly_selected', source = paste0('ev_',x))
ed
})
})
})
#add/remove tabs
observeEvent(input$add, {
req(input$addmenu)
if(input$addmenu %in% menuitems()){
showNotification("Name has been used", type = "error")
req(input$addmenu)
}else{
mitems <- c(menuitems(), input$addmenu)
menuitems(mitems)
updateTabItems(session, "tabs", selected = "options")
showNotification(paste0(input$addmenu," successfully added!"), type = "message")
}
})
observeEvent(input$del, {
req(input$delmenu)
ask_confirmation(
inputId = "delconfirm",
title = NULL,
text = tags$b(
icon("line-chart"),
paste0("Do you really want to delete ", input$delmenu,"?"),
style = "color: #FA5858;"
),
btn_labels = c("Cancel", "Delete panel"),
btn_colors = c("#00BFFF", "#FE2E2E"),
html = TRUE
)
})
observeEvent(input$delconfirm,{
if(input$delconfirm == T){
mitems <- menuitems()[-which(menuitems() == input$delmenu)]
menuitems(mitems)
updateTabItems(session, "tabs", selected = "options")
showNotification(paste0(input$delmenu," deleted!"), type = "message")
}
})
#the rest of the outputs
csvfile <- reactive({
req(input$file)
csvdata <- read.csv(file = input$file$datapath,
sep = input$sep,
quote = input$quote,
dec = input$decimal,
na.strings = c("", "NA", "#N/A","N/A"))
observe({
output$narows <- renderText({
sprintf("<u><b>Number of NA rows removed</u></b>: %s",(nrow(csvdata)-nrow(csvdata[complete.cases(csvdata),])))
})
})
csvdata <- csvdata[complete.cases(csvdata),]
for(i in ncol(csvdata)){
if(class(csvdata[,i])=='factor'){
csvdata[,i] <- as.character(csvdata[,i])
}
}
return(csvdata)
})
fcsvfile <- reactive({
dts <- csvfile();menutab <- menuitems()
if(length(unlist(global$filters))==length(menutab)){
dts <- dts
}else{
for(i in 1:length(global$filters)){
tofil <- as.vector(unlist(global$filters[[i]]))
dts <- dts[dts[,tofil[1]] %in% tofil[-1],]
}
}
return(dts)
})
output$contents <- renderTable({
if(input$disp == "head"){
return(head(csvfile()))
}else{
return(csvfile())
}
})
#filtering the data
#pointnumber (piechart) = curvenumber (barplot)
#x (barplot) = curvenumber(barplot) + 1
#for picking the row
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(crosstalk)
library(plotly)
library(tidyverse)
library(shinyWidgets)
lendist <- function(x){return(length(unique(x)))}
'%!in%' <- function(x,y)!('%in%'(x,y))
enden <- function(x){return(x[length(x)])}
ui <- dashboardPage(
dashboardHeader(title = "DataViz"),
dashboardSidebar(
uiOutput("sidetabs")
),
dashboardBody(
uiOutput("bodycontent")
)
)
server <- function(input, output, session) {
observeEvent(session, {
updateTabItems(session, "tabs", selected = "uppage")
})
menuitems <- reactiveVal(value = "Graph1")
global <- reactiveValues(filters = NULL)
#dynamic sidebar menu
output$sidetabs <- renderUI({
sidebarMenu(id = "tabs",
menuItem("Upload Page", tabName = "uppage", icon = icon("file")),
menuItem("Graphs", id = "subs", tabName = "subs",  icon = icon("line-chart"),
startExpanded = T,
lapply(menuitems(), function(x) {
menuSubItem(x, tabName = paste0("menu_", x)) } )),
menuItem("Graph Options", tabName = "options", icon = icon("gear")),
menuItem("Dashboard", tabName = "mainpage", icon = icon("dashboard"), selected = T)
)
})
#dynamic content
output$bodycontent <- renderUI({
submitems <- lapply(menuitems(), function(x){
tabItem(tabName = paste0("menu_", x), uiOutput(paste0("menu_", x)))
})
items <- c(
list(
tabItem(tabName = "mainpage",
h3("Welcome to DataViz Beta")
)
),
submitems,
list(
tabItem(tabName = "uppage",
h3("Upload your CSV file here"),
sidebarLayout(
sidebarPanel(width = 3,
fileInput('file', 'Upload CSV File:',
accept=c('text/csv',
'text/comma-separated-values,text/plain',
'.csv')),
tags$br(),
radioButtons('sep', 'Delimiter',
c(Semicolon=';',
Comma=',',
Tab='\t'),
','),
radioButtons('quote', 'Quote',
c(None='',
'Double Quote'='"',
'Single Quote'="'"),
'"'),
radioButtons('decimal', 'Decimal',
c(Comma = ',',
Dot = '.'),
'.'),
radioButtons("disp", "Display",
choices = c(Head = "head",
All = "all"),
selected = "head")
),
mainPanel(
tableOutput('contents'),
htmlOutput('narows')
)
)
)
),
list(
tabItem(tabName = "options",
textInput("addmenu", "Add New Graph (Don't use spacing between characters)"),
actionButton("add", "Add"),
selectInput("delmenu", "Delete Graph", choices = menuitems()),
actionButton("del", "Delete")
)
)
)
do.call(tabItems, items)
})
#dynamic content in the dynamic menuitems
prop <- list()
observe({
prop[[enden(menuitems())]] <- rep("",4)
lapply(menuitems(), function(x){
output[[paste0("menu_", x)]] <- renderUI ({
list(fluidRow(
box(width = 4,
pickerInput(paste0("xaxis_",x),"X-Axis",choices = c("",colnames(csvfile())), selected = max(prop[[x]][1],""), multiple = F),
pickerInput(paste0("yaxis_",x),"Y-Axis",choices = c("",colnames(csvfile())), selected = max(prop[[x]][2],""), multiple = F),
pickerInput(paste0('calcmethod_',x),"Optional Calculation on Y-Axis", choices = c("",
Sum = 'sum',
Average = 'mean',
Median = 'median',
Count = 'length',
CountD = 'lendist'),
selected = max(prop[[x]][4],""), multiple = F),
pickerInput(paste0("plotmod_",x), "Plot Model", choices = c("",
"Barplot",
"LineChart",
"ScatterPlot",
"PieChart"),
selected = max(prop[[x]][3],""), multiple = F)
# ,
# switchInput(inputId = paste0('togplot_',x), value = F)
),
box(width = 8,
#htmlOutput(paste0('testax_',x))
plotlyOutput(paste0('plot_',x)),
verbatimTextOutput(paste0('textev_',x)),
verbatimTextOutput(paste0('stextev_',x))
)
)
)
})
# output[[paste0('testax_',x)]] <- renderText({
#   paste0('X-Axis: ',input[[paste0('xaxis_',x)]],' Y-Axis: ',input[[paste0('yaxis_',x)]])
# })
prop[[x]] <- c(input[[paste0('xaxis_',x)]],
input[[paste0('yaxis_',x)]],
input[[paste0('plotmod_',x)]],
input[[paste0('calcmethod_',x)]])
#To Plot
df <- fcsvfile()
output[[paste0('plot_',x)]] <- renderPlotly({
if(length(prop[[x]])==4){
df1 <- df[c(prop[[x]][1],prop[[x]][2])]
titletext<-paste0("<b>",prop[[x]][3],"</b> ",colnames(df1)[1]," VS. ",colnames(df1)[2])
if(prop[[x]][3]=="Barplot"){
fun <- prop[[x]][4]
df1 <- df1 %>% group_by_at(vars(colnames(df1)[1])) %>% summarize_at(vars(colnames(df1)[2]),.funs=fun)
df1 <- as.data.frame(df1)
plot <- ggplot(df1, aes(x = df1[,1], y = df1[,2], fill = factor(df1[,1]))) +
geom_bar(stat="identity") +
labs(title = titletext, x = colnames(df1)[1], y = colnames(df1)[2])
ggplotly(plot+theme(legend.title = element_blank()),source = paste0('ev_',x))
clcevd <- event_data('plotly_click', source = paste0('ev_',x))$curveNumber
slcevd <- event_data('plotly_selected', source = paste0('ev_',x))$curveNumber
}else if(prop[[x]][3]=="LineChart"){
plot <- ggplot(df1, aes(x=df1[,1], y=df1[,2])) +
geom_line(color = "#2557a8", size = 1) +
labs(title = titletext, x = colnames(df1)[1], y = colnames(df1)[2])
ggplotly(plot+theme(legend.title = element_blank()),source = paste0('ev_',x))
clcevd <- event_data('plotly_click', source = paste0('ev_',x))$pointNumber
slcevd <- event_data('plotly_selected', source = paste0('ev_',x))$pointNumber
}else if(prop[[x]][3]=="ScatterPlot"){
plot <- ggplot(df1, aes(x=df1[,1], y=df1[,2])) +
geom_point(color = "#04c246") +
labs(title = titletext, x = colnames(df1)[1], y = colnames(df1)[2])
ggplotly(plot+theme(legend.title = element_blank()), source = paste0('ev_',x))
clcevd <- event_data('plotly_click', source = paste0('ev_',x))$pointNumber
slcevd <- event_data('plotly_selected', source = paste0('ev_',x))$pointNumber
}else if(prop[[x]][3]=="PieChart"){
fun <- prop[[x]][4]
df1 <- df1 %>% group_by_at(vars(colnames(df1)[1])) %>% summarize_at(vars(colnames(df1)[2]),.funs=fun)
df1 <- as.data.frame(df1)
plot_ly(df1, labels = df1[,1], values = df1[,2], type = 'pie', source = paste0('ev_',x))
clcevd <- event_data('plotly_click', source = paste0('ev_',x))$pointNumber
slcevd <- NULL
}
if(!is.null(c(clcevd,slcevd))){
selrow <- unique(c(clcevd,slcevd)) + 1
global$filters <- c(input[[paste0('xaxis_',x)]],df1[selrow,1])
}else{global$filters<-input[[paste0('xaxis_',x)]]}
}
})
output[[paste0('textev_',x)]] <- renderPrint({
ed <- event_data('plotly_click', source = paste0('ev_',x))
ed
})
output[[paste0('stextev_',x)]] <- renderPrint({
ed <- event_data('plotly_selected', source = paste0('ev_',x))
ed
})
})
})
#add/remove tabs
observeEvent(input$add, {
req(input$addmenu)
if(input$addmenu %in% menuitems()){
showNotification("Name has been used", type = "error")
req(input$addmenu)
}else{
mitems <- c(menuitems(), input$addmenu)
menuitems(mitems)
updateTabItems(session, "tabs", selected = "options")
showNotification(paste0(input$addmenu," successfully added!"), type = "message")
}
})
observeEvent(input$del, {
req(input$delmenu)
ask_confirmation(
inputId = "delconfirm",
title = NULL,
text = tags$b(
icon("line-chart"),
paste0("Do you really want to delete ", input$delmenu,"?"),
style = "color: #FA5858;"
),
btn_labels = c("Cancel", "Delete panel"),
btn_colors = c("#00BFFF", "#FE2E2E"),
html = TRUE
)
})
observeEvent(input$delconfirm,{
if(input$delconfirm == T){
mitems <- menuitems()[-which(menuitems() == input$delmenu)]
menuitems(mitems)
updateTabItems(session, "tabs", selected = "options")
showNotification(paste0(input$delmenu," deleted!"), type = "message")
}
})
#the rest of the outputs
csvfile <- reactive({
req(input$file)
csvdata <- read.csv(file = input$file$datapath,
sep = input$sep,
quote = input$quote,
dec = input$decimal,
na.strings = c("", "NA", "#N/A","N/A"))
observe({
output$narows <- renderText({
sprintf("<u><b>Number of NA rows removed</u></b>: %s",(nrow(csvdata)-nrow(csvdata[complete.cases(csvdata),])))
})
})
csvdata <- csvdata[complete.cases(csvdata),]
for(i in ncol(csvdata)){
if(class(csvdata[,i])=='factor'){
csvdata[,i] <- as.character(csvdata[,i])
}
}
return(csvdata)
})
fcsvfile <- reactive({
dts <- csvfile();menutab <- menuitems()
if(length(unlist(global$filters))==length(menutab)){
dts <- dts
}else{
for(i in 1:length(global$filters)){
tofil <- as.vector(unlist(global$filters[[i]]))
dts <- dts[dts[,tofil[1]] %in% tofil[-1],]
}
}
return(dts)
})
output$contents <- renderTable({
if(input$disp == "head"){
return(head(csvfile()))
}else{
return(csvfile())
}
})
#filtering the data
#pointnumber (piechart) = curvenumber (barplot)
#x (barplot) = curvenumber(barplot) + 1
#for picking the row
}
shinyApp(ui, server)
library(lifecontingencies)
